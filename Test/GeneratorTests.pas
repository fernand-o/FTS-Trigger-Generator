unit GeneratorTests;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Generator;

type
  // Test methods for class TFTSGenerator

  TestTFTSGenerator = class(TTestCase)
  strict private
    FFTSGenerator: TFTSGenerator;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure GenerateData_OnlyTextFields_DataGenerated;
  end;

implementation

procedure TestTFTSGenerator.SetUp;
begin
  FFTSGenerator := TFTSGenerator.Create;
end;

procedure TestTFTSGenerator.TearDown;
begin
  FFTSGenerator.Free;
  FFTSGenerator := nil;
end;

procedure TestTFTSGenerator.GenerateData_OnlyTextFields_DataGenerated;
var
  RawColumns, ReturnValue: string;
begin
  RawColumns :=
'    pessoa_id uuid NOT NULL, '+
'    nome character varying(50) NOT NULL, #A'+
'    endereco character varying(50),'+
'    numero character varying(10),'+
'    complemento character varying(20),'+
'    bairro character varying(30),'+
'    cep character(8),'+
'    email character varying(200),'+
'    observacoes memo,'+
'    cadastrado_em datahora_agora NOT NULL,'+
'    cadastrado_por uuid NOT NULL,'+
'    cidade_id uuid,'+
'    cpf character(11),'+
'    rg character varying(20),'+
'    numero_passaporte character varying(20), #B'+
'    validade_passaporte date,'+
'    sexo character(1),'+
'    fone_comercial character varying(20),'+
'    fone_residencial character varying(20),'+
'    fone_celular character varying(20),'+
'    data_nascimento date,'+
'    orgao_emissor_rg character varying(10),'+
'    data_emissao_rg date,'+
'    local_nascimento uuid,'+
'    estado_civil character(2),'+
'    razao_social character varying(100),'+
'    ie character varying(20),'+
'    fone character varying(20),'+
'    fax character varying(20),'+
'    website character varying(50),'+
'    tipo character(1) NOT NULL,'+
'    cnpj character(14),'+
'    vendedor_id uuid,'+
'    endereco2 character varying(50),'+
'    numero2 character varying(10),'+
'    complemento2 character varying(20),'+
'    bairro2 character varying(30),';

  RawColumns :=
    '    nome character varying(50) NOT NULL, #A'+ sLineBreak +
    '    endereco character varying(50),';

  ReturnValue := FFTSGenerator.GenerateData('pessoa', RawColumns);

  CheckEquals(
    'ALTER TABLE pessoa ADD COLUMN fts_document tsvector;'+
    'CREATE INDEX pessoa_fts_index ON pessoa USING gist(fts_document);'+
    'CREATE OR REPLACE FUNCTION pessoa_fts_document_trigger() RETURNS TRIGGER AS $$BEGIN'+
    'NEW.FTS_DOCUMENT = (SELECT'+
    'setweight(to_tsvector(''pt'', regexp_replace(concat_ws('' '', nome), ''[^a-zA-ZÀ-ÿ0-9\s]'', '' '', ''g'')), ''A'') ||'+
    'setweight(to_tsvector(''pt'', regexp_replace(concat_ws('' '', endereco), ''[^a-zA-ZÀ-ÿ0-9\s]'', '' '', ''g'')), ''D'')'+
    'FROM pessoa_temp);'+
    'RETURN NEW;'+
    'END;', ReturnValue);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFTSGenerator.Suite);
end.

